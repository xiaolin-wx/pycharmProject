# Generated by Django 2.2.2 on 2021-05-10 11:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.FileField(default='avatar/default.png', help_text='该用户的头像', upload_to='avatar/', verbose_name='头像')),
                ('bg_img', models.FileField(default='bg_img/default_bg.png', help_text='该用户的主页背景', upload_to='bg_img/', verbose_name='头像')),
                ('province', models.CharField(default='', help_text='该用户的省', max_length=32, verbose_name='省')),
                ('city', models.CharField(default='', help_text='该用户的市', max_length=32, verbose_name='城市')),
                ('gender', models.IntegerField(choices=[(0, '保密'), (1, '男'), (2, '女')], default=0, help_text='该用户的性别', verbose_name='性别')),
                ('phone', models.CharField(default='', help_text='该用户的联系方式', max_length=11, null=True, verbose_name='联系方式')),
            ],
            options={
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='文章的标题', max_length=32, verbose_name='标题')),
                ('head_img', models.FileField(default='article_head_img/default_head.png', help_text='文章的头图', upload_to='article_head_img/', verbose_name='头图')),
                ('description', models.CharField(help_text='简要描述该文章', max_length=128, verbose_name='摘要')),
                ('content', models.TextField(help_text='文章的内容', verbose_name='内容')),
                ('markdown', models.TextField(default='暂无', help_text='文章的Markdown内容', verbose_name='Markdown内容')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='该文章的创建时间', verbose_name='创建时间')),
                ('modify_time', models.DateTimeField(auto_now=True, help_text='该文章的最后修改时间', verbose_name='修改时间')),
                ('up_num', models.IntegerField(default=0, help_text='该文章的点赞数', verbose_name='点赞数')),
                ('down_num', models.IntegerField(default=0, help_text='该文章的点踩数', verbose_name='点踩数')),
                ('comment_num', models.IntegerField(default=0, help_text='该文章的评论数', verbose_name='评论数')),
            ],
            options={
                'verbose_name_plural': '文章',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='博主昵称', max_length=32, verbose_name='博主昵称')),
                ('subtitle', models.CharField(help_text='博客的子标题/公告', max_length=32, verbose_name='子标题/公告')),
                ('style', models.CharField(help_text='该博客独有的样式', max_length=32, verbose_name='样式')),
            ],
            options={
                'verbose_name_plural': '博客站点',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ip', models.CharField(help_text='访问用户的IP地址', max_length=64, verbose_name='访问IP')),
                ('time', models.DateTimeField(auto_now_add=True, help_text='该用户的访问时刻', verbose_name='访问时间')),
                ('url', models.CharField(help_text='该用户访问的URL地址', max_length=64, verbose_name='访问的URL')),
                ('device', models.CharField(help_text='该用户是用什么浏览器访问的', max_length=256, null=True, verbose_name='访问的浏览器')),
                ('platform', models.CharField(help_text='该用户用的是什么操作系统', max_length=256, null=True, verbose_name='访问的系统')),
            ],
            options={
                'verbose_name_plural': '日志',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Swiper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(default='swiper_img/default.jpg', help_text='轮播图的图片', upload_to='swiper_img/', verbose_name='图片')),
                ('title', models.CharField(help_text='图片的标题', max_length=32, verbose_name='标题')),
                ('img_url', models.CharField(help_text='点击图片要跳转的URL地址', max_length=64, verbose_name='URL')),
            ],
            options={
                'verbose_name_plural': '轮播图',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='标签的名字', max_length=32, verbose_name='标签')),
                ('blog', models.ForeignKey(blank=True, help_text='该标签属于哪个博客页面', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='blog.Blog', verbose_name='博客')),
            ],
            options={
                'verbose_name_plural': '标签',
            },
        ),
        migrations.CreateModel(
            name='UpAndDown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_up', models.BooleanField(help_text='True为点赞，False为点踩', null=True, verbose_name='点赞点踩')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='点赞点踩的时间', verbose_name='创建时间')),
                ('article', models.ForeignKey(help_text='针对哪篇文章', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Article', verbose_name='文章')),
                ('user', models.ForeignKey(help_text='来自哪个用户', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name_plural': '点赞点踩',
            },
        ),
        migrations.CreateModel(
            name='Tag2Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(default='', help_text='关联的文章', on_delete=django.db.models.deletion.CASCADE, to='blog.Article', verbose_name='文章')),
                ('tag', models.ForeignKey(default='', help_text='关联的标签', on_delete=django.db.models.deletion.SET_DEFAULT, to='blog.Tag', verbose_name='标签')),
            ],
            options={
                'verbose_name_plural': '标签关联文章',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(help_text='评论的内容', max_length=256, verbose_name='内容')),
                ('comment_time', models.DateTimeField(auto_now_add=True, help_text='评论的时间', verbose_name='时间')),
                ('article', models.ForeignKey(help_text='评论的对象是哪篇文章', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Article', verbose_name='文章')),
                ('comment_id', models.ForeignKey(help_text='对哪个id的评论进行评论', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Comment', verbose_name='评论id')),
                ('user', models.ForeignKey(help_text='该评论来自哪个用户', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name_plural': '评论',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='分类的名称', max_length=32, verbose_name='分类')),
                ('blog', models.ForeignKey(blank=True, help_text='该分类属于哪个博客页面', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='blog.Blog', verbose_name='博客')),
            ],
            options={
                'verbose_name_plural': '分类',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='blog',
            field=models.ForeignKey(blank=True, help_text='该文章属于哪个博客页面', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Blog', verbose_name='博客'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(blank=True, help_text='该文章属于哪个分类', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Category', verbose_name='分类'),
        ),
        migrations.AddField(
            model_name='article',
            name='tag',
            field=models.ManyToManyField(help_text='该文章有哪些标签', through='blog.Tag2Article', to='blog.Tag', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='blog',
            field=models.OneToOneField(help_text='该用户的博客', null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Blog', verbose_name='博客'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
